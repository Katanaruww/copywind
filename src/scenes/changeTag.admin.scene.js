const { Scenes } = require('telegraf')
const account = require('../../database/models/account')

const changeTagScene = new Scenes.WizardScene('admin_ChangeTag', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.id = ctx.callbackQuery.data.split(' ')[1]
        await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—ç–≥ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞</b> <code>${ctx.wizard.state.data.id}</code>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>XYECOC1337</code>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `nazad` }]
                ]
            }
        })
        return await ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        await account.findOneAndUpdate({ tgID: ctx.wizard.state.data.id }, { $set: { tag: ctx.message.text } }, { new: true }).then(async (res) => {
            if (res) {
                await ctx.replyWithHTML(`<b>–í–æ—Ä–∫–µ—Ä—É</b> <code>${ctx.wizard.state.data.id}</code> <b>–±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π —Ç—ç–≥:</b> <code>#${res.tag}</code>`)
            }
        }).catch(async (err) => {
            await ctx.replyWithHTML(`<b>–û—à–∏–±–∫–∞. –ù–µ –º–æ–≥—É –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Ç—ç–≥ –≤–æ—Ä–∫–µ—Ä—É:</b> <code>${err}</code>`)
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

changeTagScene.action('nazad', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = changeTagScene