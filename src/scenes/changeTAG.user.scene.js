const { Scenes } = require('telegraf')

const config = require('../../configs/config.json')
const account = require('../../database/models/account')

const changeTagScene = new Scenes.WizardScene('changeTag', async (ctx) => {
    try {
        await ctx.replyWithHTML(`<b>‚ùï –í–≤–µ–¥–∏—Ç–µ TAG, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b>\n‚ùî <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> <code>–¥–∞–Ω–Ω—ã–π —Ç—ç–≥ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –Ω–æ –∏ –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö</code>\n‚ùî <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç—ç–≥ –±–µ–∑ —Ä–µ—à–µ—Ç–∫–∏, —ç—Ç–æ –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ</b>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: '–û—Ç–º–µ–Ω–∞' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.reply(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
            
            return ctx.scene.leave()
        } else {
            await account.findOne({ tag: ctx.message.text }).then(async (res) => {
                if (res) {
                    await ctx.replyWithHTML(`‚ùï <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç—ç–≥ —É–∂–µ –∑–∞–Ω—è—Ç, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–Ω–æ–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π!</b>`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                            ]
                        }
                    })
    
                    return ctx.scene.leave()
                } else {
                    await account.findOneAndUpdate({ tgID: ctx.from.id }, { $set: { tag: ctx.message.text } }, { new: true }).then(async (res_change) => {
                        await ctx.replyWithHTML(`üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å —Ç—ç–≥ #${res_change.tag}</b>`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                                ]
                            }
                        })
    
                        await ctx.telegram.sendMessage(config.bot.archive_chat, `<b>–í–æ—Ä–∫–µ—Ä</b> @${ctx.from.username} <b>—Å–º–µ–Ω–∏–ª —Ç—ç–≥ –Ω–∞</b> #${res_change.tag}`, { parse_mode: 'HTML' }).catch(async (e) => {
                            console.log(e)
                        })
    
                        return ctx.scene.leave()
                    })
                }
            })
    
            return ctx.scene.leave()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

changeTagScene.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = changeTagScene