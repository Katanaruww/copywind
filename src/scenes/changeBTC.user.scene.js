const { validate } = require('bitcoin-address-validation')
const { Scenes } = require('telegraf')

const config = require('../../configs/config.json')
const account = require('../../database/models/account')

const changeBTCAddr = new Scenes.WizardScene('changeBTCAddr', async (ctx) => {
    try {
        await ctx.replyWithPhoto('https://i.ibb.co/g9TFQ5b/Untitled.png', {
            caption: `<b>‚ùï –í–≤–µ–¥–∏—Ç–µ BTC –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã</b>`,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: '–û—Ç–º–µ–Ω–∞' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (validate(ctx.message.text)) {
            await account.findOneAndUpdate({ tgID: ctx.from.id }, { $set: { btc: ctx.message.text } }, { new: true }).then(async (res) => {
                await ctx.replyWithHTML(`<b>‚ùï –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω</b> <code>${res.btc}</code> <b>BTC –∞–¥—Ä–µ—Å</b>`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                        ]
                    }
                })

                await ctx.telegram.sendMessage(config.bot.archive_chat, `<b>–í–æ—Ä–∫–µ—Ä</b> @${ctx.from.username} <b>—Å–º–µ–Ω–∏–ª BTC –∞–¥—Ä–µ—Å –Ω–∞</b> ${res.btc}`, { parse_mode: 'HTML' }).catch(async (e) => {
                    console.log(e)
                })

                return ctx.scene.leave()
            })
        } else {
            await ctx.replyWithHTML(`<b>‚ùï –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —Å–Ω–æ–≤–∞)</b>`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })

            return ctx.scene.leave()
        }

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

changeBTCAddr.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = changeBTCAddr