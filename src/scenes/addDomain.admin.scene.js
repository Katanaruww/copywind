const { Scenes } = require('telegraf')
const domains = require('../../database/models/domains')

const addDomainScene = new Scenes.WizardScene('admin_addDomain', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML('üßë‚Äçüíª <b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª –¥–æ–º–µ–Ω–æ–≤</b>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'nazad' }]
                ]
            }
        })

        return await ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        let domainsList = []
        if (ctx.message.text.split('\n').length == 1) {
            ctx.wizard.state.data.domains = ctx.message.text
            await domains.insertMany({
                domain: ctx.message.text
            }).then(async (res) => {
                await ctx.replyWithHTML(`üßë‚Äçüíª <b>–î–æ–º–µ–Ω</b> <code>${ctx.message.text}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª –¥–æ–º–µ–Ω–æ–≤</b>`)
            })
        } else {
            let temp = []
            for (let i = 0; i < ctx.message.text.split('\n').length; i++) {
                temp.push(
                    new Object({
                        domain: ctx.message.text.split('\n')[i]
                    })
                )
            }

            await domains.insertMany(temp).then(async (res) => {
                await ctx.replyWithHTML(`üßë‚Äçüíª <b>–î–æ–º–µ–Ω</b> <code>${ctx.message.text}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª –¥–æ–º–µ–Ω–æ–≤</b>`)
            }).catch(async (res) => {
                await ctx.replyWithHTML(`üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã. –û—à–∏–±–∫–∞:</b> <code>${res}</code>`)
            })
        }

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

addDomainScene.action('nazad', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = addDomainScene