const { Scenes } = require('telegraf')
const teacher = require('../../database/models/teacher')

const changeDescription = new Scenes.WizardScene('changeDescriptionTeacher', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.id = ctx.callbackQuery.data.split(' ')[1]

        await ctx.replyWithHTML(`<b>‚ùï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.</b>\n‚ùî –î–∏–∑–∞–π–Ω —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å –ø–æ–º–æ—â—å—é HTML —Ç—ç–≥–æ–≤, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –¥–∏–∑–∞–π–Ω–æ–º —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∫–æ–¥–µ—Ä–∞.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })
        return await ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.text = ctx.message.text
        await teacher.findOneAndUpdate({ tgID: ctx.wizard.state.data.id }, { $set: { description: ctx.wizard.state.data.text } }, { new: true }).then(async (res) => {
            if (res) {
                await ctx.replyWithHTML(`üßë‚Äçüè´ <b>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b> <code>${ctx.wizard.state.data.id}</code> <b>–±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>`)
            }
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

changeDescription.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = changeDescription