const { Scenes } = require('telegraf')
const request = require('request')
const config = require('../../configs/config.json')

const domains = require('../../database/models/domains')
const support = require('../../database/models/support')

const sendDefScene = new Scenes.WizardScene('sendMessageDefault', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.id = ctx.callbackQuery.data.split(' ')[1]
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        await support.insertMany({
            id: ctx.wizard.state.data.id,
            who: 'Support',
            text: ctx.message.text,
            time: parseInt(new Date().getTime() / 1000)
        }).then(async (res) => {
            ctx.replyWithHTML(`üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!</b>`, {  reply_to_message_id: ctx.message.message_id });
        }).catch(async (err) => {
            ctx.replyWithHTML(`üì© <b>–û—à–∏–±–∫–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n<b>‚ùî –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–°—É:</b> <code>${err}</code>`)
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

sendDefScene.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = sendDefScene