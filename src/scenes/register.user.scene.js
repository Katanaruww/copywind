const { Scenes } = require('telegraf')
const loggy = require('loggy')

const config = require('../../configs/config.json')
const account = require('../../database/models/account')

const registerScene = new Scenes.WizardScene('registerScene', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML(`1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ!</b>`)
        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.exp = ctx.message.text
        await ctx.replyWithHTML(`2Ô∏è‚É£ <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—Å</b>`)
        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.where = ctx.message.text
        await ctx.replyWithHTML(`3Ô∏è‚É£ <b>–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–µ?</b>`)
        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.time = ctx.message.text
        await ctx.replyWithHTML(`üß® <b>–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏... –û–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b> üß®`)
        await ctx.telegram.sendMessage(config.bot.request_logs, `ü§ñ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!</b> ü§ñ\n\nüßæ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ctx.from.username} (${ctx.from.id})\n\n<b>üìß –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> ${ctx.wizard.state.data.exp}\n<b>üìß –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª:</b> ${ctx.wizard.state.data.where}\n<b>üìß –í—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b> ${ctx.wizard.state.data.time}`, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${ctx.from.id}` }, { text: '‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å ${ctx.from.id}` }]
                ]
            }
        }).catch(async (err) => {
            loggy.warn(`problems with register user => ${err}`)
        })

        return await ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

module.exports = registerScene