const { Scenes } = require('telegraf')
const account = require('../../database/models/account')

const upPercent = new Scenes.WizardScene('upPercent_scene', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.tgID = ctx.callbackQuery.data.split(' ')[1]
        await ctx.replyWithHTML(`<b>üßë‚Äçüíª –í–≤–µ–¥–∏—Ç–µ %, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—É</b> <code>${ctx.wizard.state.data.tgID}</code>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })
        
        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        await account.findOneAndUpdate({ tgID: ctx.wizard.state.data.tgID }, { $set: { percent: parseInt(ctx.message.text) } }, { new: true }).then(async (res) => {
            await ctx.replyWithHTML(`üßë‚Äçüíª <b>–í–æ—Ä–∫–µ—Ä—É</b> <code>${ctx.wizard.state.data.tgID}</code> <b>(</b><code>#${res.tag}</code><b>) –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–∞—Ö ‚Äî</b> <code>${parseInt(ctx.message.text)}%</code>`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

upPercent.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = upPercent