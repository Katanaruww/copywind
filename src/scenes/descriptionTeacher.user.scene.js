const { Scenes } = require('telegraf')
const teacher = require('../../database/models/teacher')

const upToTeacher = new Scenes.WizardScene('descriptionTeacer', async (ctx) => {
    try {
        await teacher.findOne({ tgID: ctx.from.id }).then(async (res) => {
            if ((!res) || (ctx.from.id != res.tgID)) {
                await ctx.replyWithHTML('<b>ü™ß –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ...</b>')
                return await ctx.wizard.next()
            } else {
                await ctx.replyWithHTML(`–û—à–∏–±–∫–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∂–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                        ]
                    }
                })
                return ctx.scene.leave()
            }
        })
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        await teacher.insertMany({
            tgID: ctx.from.id,
            tgUsername: ctx.from.username,
            description: ctx.message.text
        }).then(async (res) => {
            await ctx.replyWithHTML('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º! –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ø–∞–Ω–µ–ª–∏ "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏"', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
        })

        return await ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

module.exports = upToTeacher