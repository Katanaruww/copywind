const { Scenes } = require('telegraf')
const validURL = require('valid-url')
const axios = require('axios')

const account = require('../../database/models/account')
const receive = require('../../database/models/receive')
const linkGen = require('../other/generateLink')
const config = require('../../configs/config.json')
const logs = require('../../database/models/log')

const ebayParser = require('../../src/other/parseEbay')

const creatorScene = new Scenes.WizardScene('creatorScene', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.tgid = ctx.from.id
        ctx.wizard.state.data.service = ctx.callbackQuery.data
        
        await ctx.replyWithHTML(`ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏</b>`, {
            reply_markup: {
                resize_keyboard: true,
                keyboard: [
                    [{ text: 'ü•∑üèª –†—É—á–Ω–æ–π' }, { text: '‚öôÔ∏è –ü–∞—Ä—Å–µ—Ä' }],
                    [{ text: '–ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == 'ü•∑üèª –†—É—á–Ω–æ–π') {
            ctx.wizard.state.data.type = ctx.message.text
            ctx.replyWithHTML(`<b>ü§ñ –ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>`, {
                reply_markup: {
                    resize_keyboard: true,
                    keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            })

            return ctx.wizard.next()
        } else if (ctx.message.text == '‚öôÔ∏è –ü–∞—Ä—Å–µ—Ä') {
            ctx.wizard.state.data.type = ctx.message.text
            ctx.replyWithHTML(`<b>ü§ñ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>`, {
                reply_markup: {
                    resize_keyboard: true,
                    keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            })

            return ctx.wizard.selectStep(4)
        } else {
            await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.name = ctx.message.text
            await ctx.replyWithHTML(`ü§ñ <b>–ü—Ä–∏—à–ª–∏ –ø—Ä–∞–π—Å —Ç–æ–≤–∞—Ä–∞</b>`)
        
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.price = parseInt(ctx.message.text)
            await ctx.replyWithHTML(`ü§ñ <b>–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b> (@Images_24_bot)`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠', callback_data: 'skip' }]
                    ]
                }
            })
            
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            if (ctx.wizard.state.data.type == "ü•∑üèª –†—É—á–Ω–æ–π")  {
                ctx.wizard.state.data.photo = ctx.message.text
            } else {
                /* await ctx.replyWithHTML(`–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–æ–±—É–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä. –°–µ–π—á–∞—Å –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–µ –∫–æ–¥–∏–Ω–≥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å–∏–∫ –∏ –ø–∞—Ä—Å–µ—Ä —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –∞ –ø–æ–∫–∞ —á—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                        ]
                    }
                })
        
                return ctx.scene.leave() */
                if (validURL.isUri(ctx.message.text)) {
                    let hostname = new URL(ctx.message.text).hostname
                    if ((hostname.includes('olx.pt')) || (hostname.includes('olx.ro')) || (hostname.includes('olx.pl')) || (hostname.includes('quoka.de')) || (hostname.includes('wallapop.com')) || (hostname.includes('ebay-kleinanzeigen')) /* || (hostname.includes('bazos')) || (hostname.includes('bazar')) */) {
                        await ctx.replyWithHTML('ü§ñ <b>–ü–∞—Ä—Å–∏–º... –ü–æ–¥–æ–∂–æ–¥–∏—Ç–µ 2-5 —Å–µ–∫—É–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!</b>')
                        if (ctx.wizard.state.data.service != 'üá©üá™ Ebay 2.0') {
                            await axios.post('http://51.91.57.147:3000/parse', {
                                service: `${ctx.wizard.state.data.service}`,
                                url: `${ctx.message.text}`,
                                timeout: 5000
                            }).then(async (res) => {
                                if (res.data.error) {
                                    await ctx.reply(`–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ... –í–µ—Ä–Ω–∏—Ç—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`, {
                                        reply_markup: {
                                            inline_keyboard: [
                                                [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                                            ]
                                        }
                                    })
        
                                    return ctx.scene.leave()
                                } else {
                                    ctx.wizard.state.data.name = await res.data['name']
                                    ctx.wizard.state.data.price = await res.data['price']
                                    ctx.wizard.state.data.photo = await res.data['image']
                                }
                            }).catch(async (err) => {
                                await ctx.reply(`–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ... –í–µ—Ä–Ω–∏—Ç—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`, {
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                                        ]
                                    }
                                })
    
                                return ctx.scene.leave()
                            })
                        } else {
                            await ebayParser(ctx.message.text, 'üá©üá™ Ebay 2.0').then(async (res) => {
                                ctx.wizard.state.data.name = await res[0]
                                ctx.wizard.state.data.price = await res[1]
                                ctx.wizard.state.data.photo = await res[2]
                            }).catch(async (err) => {
                                await ctx.reply(`–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ... –í–µ—Ä–Ω–∏—Ç—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`, {
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                                        ]
                                    }
                                })
    
                                return ctx.scene.leave()
                            })
                        }
                    } else {
                        await ctx.replyWithHTML(`–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∂–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –Ω–µ–≥–æ –µ—â—ë –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                                ]
                            }
                        })
                
                        return ctx.scene.leave()
                    }
                } else {
                    await ctx.replyWithHTML(`üñêüèª –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—Å–µ—Ä, –Ω–æ –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä —Å–Ω–æ–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`)
                    return ctx.wizard.selectStep(1)
                }
            }
            
            await account.findOne({ tgID: ctx.from.id }).then(async (res) => {
                if (res.address == '') {
                    await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>`)
                } else {
                    await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>`, {
                        reply_markup: {
                            resize_keyboard: true,
                            keyboard: [
                                [{ text: res.address }],
                                [{ text: '–ù–∞–∑–∞–¥' }]
                            ]
                        }
                    })
                }
            })
        
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        console.log(e)

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.address = ctx.message.text
            await account.findOneAndUpdate({ tgID: ctx.from.id }, { $set: { address: ctx.message.text } }, { new: true })
            await account.findOne({ tgID: ctx.from.id }).then(async (res) => {
                if (res.name == '') {
                    await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ü—Ä–∏–º–µ—Ä:</b> <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</code><b>)</b>`)
                } else {
                    await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ü—Ä–∏–º–µ—Ä:</b> <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</code><b>)</b>`, {
                        reply_markup: {
                            resize_keyboard: true,
                            keyboard: [
                                [{ text: res.name }],
                                [{ text: '–ù–∞–∑–∞–¥' }]
                            ]
                        }
                    })
                }
            })
            
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.fio = ctx.message.text
        await account.findOneAndUpdate({ tgID: ctx.from.id }, { $set: { name: ctx.message.text } }, { new: true })

        await receive.insertMany({
            service: ctx.wizard.state.data.service,
            tgID: ctx.wizard.state.data.tgid,
            tgUsername: ctx.from.username,
            product_name: ctx.wizard.state.data.name,
            product_price: ctx.wizard.state.data.price,
            product_image: ctx.wizard.state.data.photo,
            product_address: ctx.wizard.state.data.address,
            product_buyer: ctx.wizard.state.data.fio
        }).then(async (res) => {
            await linkGen(res[0].service, res[0].link, ctx.from.id).then(async (link) => {
                let inline_arr = []

                inline_arr.push(new Array({ text: 'üï∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ üï∏', url: link }))
                inline_arr.push(new Array({ text: 'üíå –ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ú–°? üíå', callback_data: `sendSMS ${res[0].link}` }))
                
                /* if (ctx.wizard.state.data.service.includes('Vinted')) {
                    inline_arr.push(new Array({ text: 'üìß –ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å eMail? üìß', callback_data: `sendEmail ${res[0].link}` }))
                } */

                if (ctx.wizard.state.data.service.includes('Ebay 2.0')) {
                    inline_arr.push(new Array({ text: '‚ùî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ ‚ùî', url: `${link.replace('order', 'delivery')}` }))
                }

                inline_arr.push(new Array({ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }))

                await ctx.replyWithHTML(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã ;)</b>\n\nüîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:</b> ${link}`, {
                    reply_markup: {
                        inline_keyboard: inline_arr,
                        remove_keyboard: true
                    }
                })

                await ctx.telegram.sendMessage(config.bot.archive_chat, `${res[0].service} <b>—Å–æ–∑–¥–∞–Ω–∏–µ!</b>\n\n<b>–í–æ—Ä–∫–µ—Ä:</b> ${res[0].tgID} <b>|</b> @${res[0].tgUsername}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${res[0].product_name}\n<b>–ü—Ä–∞–π—Å:</b> ${res[0].product_price}\n\n<b>–°—Å—ã–ª–∫–∞:</b> ${link}`, { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `deleteSpam ${res[0].link}` }]
                        ]
                    }
                }).catch(async (e) => {
                    console.log(e)
                })
            })

            await logs.insertMany({ link: res[0].link })
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        console.log(e)

        return ctx.scene.leave()
    }
})

creatorScene.action('skip', async (ctx) => {
    ctx.wizard.state.data.photo = 'https://m.media-amazon.com/images/I/51UW1849rJL._AC_SY450_.jpg'
    await account.findOne({ tgID: ctx.from.id }).then(async (res) => {
        if (res.address == '') {
            await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>`)
        } else {
            await ctx.replyWithHTML(`ü§ñ <b>–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>`, {
                reply_markup: {
                    resize_keyboard: true,
                    keyboard: [
                        [{ text: res.address }],
                        [{ text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            })
        }
    })

    return await ctx.wizard.next()
})

module.exports = creatorScene