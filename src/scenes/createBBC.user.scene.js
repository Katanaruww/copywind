const { Scenes } = require('telegraf')

const bbc = require('../../database/models/bbc')
const linkGen = require('../other/generateLink')
const logs = require('../../database/models/log')

const config = require('../../configs/config.json')

const bbcCreate = new Scenes.WizardScene('bbc1', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.tgid = ctx.from.id
        ctx.wizard.state.data.service = ctx.callbackQuery.data

        if (ctx.wizard.state.data.service.includes('1.0')) {
            ctx.wizard.state.data.type = "1"
        } else {
            ctx.wizard.state.data.type = "2"  
        }

        await ctx.replyWithHTML('üöô <b>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ú–æ—Å–∫–≤–∞</code>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'nazad' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.city_from = ctx.message.text

        await ctx.replyWithHTML('üöô <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–£–ª–∏—Ü–∞ –°–≤–∞—Ä–æ–≤—Å–∫–∏, –¥. 10</code>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'nazad' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.place_from = ctx.message.text

        await ctx.replyWithHTML('üöô <b>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è</b>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä</code>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'nazad' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.city_to = ctx.message.text

        await ctx.replyWithHTML('üöô <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>1/25/2022</code>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'nazad' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.date_from = ctx.message.text

        await ctx.replyWithHTML('üöô <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏</b>\n‚ùï <b>–ü—Ä–∏–º–µ—Ä:</b> <code>6980</code>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'nazad' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.price = ctx.message.text

        await bbc.insertMany({
            service: ctx.wizard.state.data.service,
            tgID: ctx.from.id,
            tgUsername: ctx.from.username,
            city_from: ctx.wizard.state.data.city_from,
            place_from: ctx.wizard.state.data.place_from,
            city_to: ctx.wizard.state.data.city_to,
            date_from: ctx.wizard.state.data.date_from,
            price: parseInt(ctx.wizard.state.data.price)
        }).then(async (res) => {
            await linkGen(res[0].service, res[0].link, ctx.from.id).then(async (link) => {
                await ctx.replyWithHTML(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã ;)</b>\n\nüîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:</b> ${link}`, {
                    reply_markup: {
                        remove_keyboard: true,
                        inline_keyboard: [
                            [{ text: 'üï∏ –û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üï∏', url: link }],
                            [{ text: 'üíå –ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ú–°? üíå', callback_data: `sendSMS ${res[0].link}` }],
                            [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                        ]
                    }
                })
                
                await ctx.telegram.sendMessage(config.bot.archive_chat, `${res[0].service} <b>—Å–æ–∑–¥–∞–Ω–∏–µ!</b>\n\n<b>–í–æ—Ä–∫–µ—Ä:</b> ${res[0].tgID} <b>|</b> @${res[0].tgUsername}\n<b>–ü–æ–µ–∑–¥–∫–∞:</b> ${res[0].city_from} -> ${res[0].city_to}\n<b>–ü—Ä–∞–π—Å:</b> ${res[0].price}\n\n<b>–°—Å—ã–ª–∫–∞:</b> ${link}`, { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `deleteSpamBBC ${res[0].link}` }]
                        ]
                    }
                }).catch(async (e) => {
                    console.log(e)
                })
            })

            await logs.insertMany({ link: res[0].link })
        })

        return ctx.scene.leave()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥–¥–¥–¥–¥' }]
                ]
            }
        })

        console.log(e)

        return ctx.scene.leave()
    }
})

bbcCreate.action('nazad', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = bbcCreate