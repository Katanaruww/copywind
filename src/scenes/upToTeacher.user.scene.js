const { Scenes } = require('telegraf')
const config = require('../../configs/config.json')

const upToTeacher = new Scenes.WizardScene('upToTeacher', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.tgID = ctx.from.id
        ctx.wizard.state.data.tgUsername = ctx.from.username

        await ctx.replyWithHTML('1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ!</b>', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })
        return await ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.exp = ctx.message.text

            await ctx.replyWithHTML('2Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ—Ñ–∏—Ç–∞–º–∏ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)</b>')
            return await ctx.wizard.next()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text == '–ù–∞–∑–∞–¥') {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
    
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.proofs = ctx.message.text

            await ctx.replyWithHTML('3Ô∏è‚É£ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ...</b>')
            await ctx.telegram.sendMessage(config.bot.request_logs, `üè¶ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞!</b>\n\n<b>–í–æ—Ä–∫–µ—Ä:</b> @${ctx.wizard.state.data.tgUsername} (${ctx.wizard.state.data.tgID})\n\n<b>–û–ø—ã—Ç:</b> ${ctx.wizard.state.data.exp}\n<b>–ü—Ä—É—Ñ—ã –≤–æ—Ä–∫–∞:</b> ${ctx.wizard.state.data.proofs}`, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ "–æ —Å–µ–±–µ"', callback_data: `accessTeacher ${ctx.wizard.state.data.tgID}` }],
                        [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `denyTeacher ${ctx.wizard.state.data.tgID}` }]
                    ]
                }
            })
            return await ctx.scene.leave()
        }
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

upToTeacher.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = upToTeacher