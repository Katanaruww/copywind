const { Scenes } = require('telegraf')
const loggy = require('loggy')

const account = require('../../database/models/account')
const config = require('../../configs/config.json')

const prScene = new Scenes.WizardScene('prScene', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithPhoto('https://raw.githubusercontent.com/hosein2398/node-telegram-bot-api-tutorial/master/pics/parse_mode.JPG', {
            caption: `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –õ–° –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.\n\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω–æ–º —à—Ä–∏—Ñ—Ç–æ–º - <b>ZeroRent</b>\n–ù–∞–∫–ª–æ–Ω–Ω—ã–π - <i>ZeroRent</i>\n–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ –∫–æ–¥–∞ - <code>ZeroRent</code>`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.text = ctx.message.text
        await ctx.replyWithHTML(`<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏</b>`, {
            reply_markup: {
                resize_keyboard: true,
                keyboard: [
                    [{ text: '–ë–æ—Ç' }, { text: '–ë–æ—Ç + –≤—ã–ø–ª–∞—Ç—ã' }, { text: '–ë–æ—Ç + –≤—ã–ø–ª–∞—Ç—ã + —á–∞—Ç' }],
                    [{ text: '–ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.type = ctx.message.text

        if (ctx.wizard.state.data.type == '–ë–æ—Ç') {
            await account.find({  }).lean().then(async (res) => {
                await ctx.replyWithHTML(`üîî <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ</b> <code>${res.length}</code> <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</b>`)
                for (let i = 0; i < res.length; i++) {
                    await ctx.telegram.sendMessage(res[i].tgID, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n${ctx.wizard.state.data.text}`, { 
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚ùå –°–∫—Ä—ã—Ç—å', callback_data: '–§—ç–π–∫_profittzz' }]
                            ]
                        }
                    }).catch(async (err) => {
                        loggy.warn(`problems with sending message to all => ${err}`)
                    })
                }
            })
    
            return ctx.scene.leave()
        } else if (ctx.wizard.state.data.type == '–ë–æ—Ç + –≤—ã–ø–ª–∞—Ç—ã') {
            await account.find({  }).lean().then(async (res) => {
                await ctx.telegram.sendMessage(config.bot.profits_channel, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n<b>${ctx.wizard.state.data.text}</b>`, { parse_mode: 'HTML' })
                await ctx.replyWithHTML(`üîî <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ</b> <code>${res.length}</code> <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</b>`)
                for (let i = 0; i < res.length; i++) {
                    await ctx.telegram.sendMessage(res[i].tgID, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n${ctx.wizard.state.data.text}`, { 
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚ùå –°–∫—Ä—ã—Ç—å', callback_data: '–§—ç–π–∫_profittzz' }]
                            ]
                        }
                    }).catch(async (err) => {
                        loggy.warn(`problems with sending message to all => ${err}`)
                    })
                }
            })
    
            return ctx.scene.leave()
        } else if (ctx.wizard.state.data.type == '–ë–æ—Ç + –≤—ã–ø–ª–∞—Ç—ã + —á–∞—Ç') {
            await account.find({  }).lean().then(async (res) => {
                await ctx.telegram.sendMessage(config.bot.profits_channel, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n<b>${ctx.wizard.state.data.text}</b>`, { parse_mode: 'HTML' })
                await ctx.telegram.sendMessage(-1001759957604, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n<b>${ctx.wizard.state.data.text}</b>`, { parse_mode: 'HTML' })
                await ctx.replyWithHTML(`üîî <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ</b> <code>${res.length}</code> <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</b>`)
                for (let i = 0; i < res.length; i++) {
                    await ctx.telegram.sendMessage(res[i].tgID, `‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚ö†Ô∏è\n\n${ctx.wizard.state.data.text}`, { 
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚ùå –°–∫—Ä—ã—Ç—å', callback_data: '–§—ç–π–∫_profittzz' }]
                            ]
                        }
                    }).catch(async (err) => {
                        loggy.warn(`problems with sending message to all => ${err}`)
                    })
                }
            })
        } else {
            await ctx.replyWithHTML(`–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                    ]
                }
            })
            return ctx.scene.leave()
        }

        return ctx.scene.leave()
    } catch (e) {
        console.log(e)
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`)
        return ctx.scene.leave()
    }
})

prScene.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = prScene