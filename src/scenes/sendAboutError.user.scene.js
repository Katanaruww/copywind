const { Scenes } = require('telegraf')
const config = require('../../configs/config.json')

const sayAboutError = new Scenes.WizardScene('aboutError', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML(`‚ùï <b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–µ–ª–∏ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ!</b>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })

        return await ctx.wizard.next()
    } catch (e) { 
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.error = ctx.message.text
        await ctx.replyWithHTML(`‚ùï <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä–æ–±–ª–µ–º—É!</b> (@Images_24_bot)`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'nazad_data' }]
                ]
            }
        })

        return await ctx.wizard.next()
    } catch (e) { 
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        ctx.wizard.state.data.image = ctx.message.text
        await ctx.replyWithHTML(`‚ùï <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ!</b>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        await ctx.telegram.sendMessage(-1001530239473, `‚ö†Ô∏è <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–± –æ—à–∏–±–∫–µ!</b> ‚ö†Ô∏è\n<b>–û—Ç:</b> @${ctx.from.username}\n\n<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> ${ctx.wizard.state.data.error}\n–ü—Ä—É—Ñ —Å–∫—Ä–∏–Ω—à–æ—Ç: ${ctx.wizard.state.data.image}`, { parse_mode: 'HTML' })
        return await ctx.scene.leave()
    } catch (e) { 
        await ctx.replyWithHTML(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üñá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ]
            }
        })

        return ctx.scene.leave()
    }
})

sayAboutError.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = sayAboutError