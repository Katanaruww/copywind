const { Scenes } = require('telegraf')
const config = require('../../configs/config.json')

const account = require('../../database/models/account')
const teacher = require('../../database/models/teacher')
const receive = require('../../database/models/receive')
const cassa = require('../../database/models/cassa')
const bbc = require('../../database/models/bbc')

const convertCurr = require('../other/convertCurr2')
const getCurrentDate = require('../other/getCurrentDate')

const currency = require('currency.js')

// const successScene = new Scenes.BaseScene('success')
const successScene = new Scenes.WizardScene('success', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.vbiver_id = ctx.from.id
        ctx.wizard.state.data.vbiverUS = ctx.from.username
        ctx.wizard.state.data.link = ctx.callbackQuery.data.split(' ')[1]

        await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
                ]
            }
        })

        return ctx.wizard.next()
    } catch (e) {
        console.log(e)
        return ctx.scene.leave()
    }
}, async (ctx) => {
    try {
        if (ctx.message.text != NaN) {
            if (parseInt(ctx.message.text) < 0) {
                await ctx.replyWithHTML(`–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0`)
                return ctx.scene.leave()
            } else {
                ctx.wizard.state.data.price = parseInt(ctx.message.text)
                let data = await receive.findOne({ link: ctx.wizard.state.data.link }).lean()
                if (!data) data = await bbc.findOne({ link: ctx.wizard.state.data.link }).lean()
                
                let accData = await account.findOne({ tgID: data.tgID }).lean()
                let res_percent = (accData.percent != undefined) ? accData.percent : 60
    
                let msg = [
                    `<b>üí∞ –ù–û–í–´–ô –ó–ê–õ–ï–¢ | ${data.service}</b>`, // 0
                    `‚úÖ <b>–ü—Ä–æ—Ñ–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ—Ä–∫–µ—Ä—É</b> @${data.tgUsername} (${data.tgID})`, // 1
                    `üí∏ <b>–°—É–º–º–∞: ${ctx.wizard.state.data.price} RUB</b>`, // 2
                    `\n`, // 3
                    `üí∞ <b>–í—ã–ø–ª–∞—Ç–∞: ... RUB</b>`, // 4
                    `üí∞ <b>BTC –∞–¥—Ä–µ—Å:</b> <code>${(accData.btc != undefined) ? accData.btc : '–ù–µ –ø—Ä–∏—Å–≤–æ–µ–Ω.'}</code>`, // 5
                    ``, // 6
                    ``, // 7
                    ``, // 8
                    `ü§ñ <b>–í—ã–ø–ª–∞—Ç–∞ –∑–∞–º—É: ${parseInt(ctx.wizard.state.data.price) / 100 * 8} RUB</b>`, // 9
                    `üë®‚Äçüíª <b>–í—ã–ø–ª–∞—Ç–∞ –∫–æ–¥–µ—Ä—É: ${parseInt(ctx.wizard.state.data.price) / 100 * 7} RUB</b>`, // 10
                    `üí≥ <b>–í–±–∏–ª: ${ctx.from.username}</b> <b>(${parseInt(ctx.wizard.state.data.price) / 100 * 10} RUB)</b>`
                ]
    
                if (data.sms == 'yes') {
                    res_percent -= 5
                    msg[6] = `üíå <b>–í—ã–ø–ª–∞—Ç–∞ —Å–º—Å–µ—Ä—É: ${parseInt(ctx.wizard.state.data.price) / 100 * 7.5} RUB</b>`
                    try {
                        await ctx.telegram.sendMessage(633715506, `–°–ü–ê–°–ò–ë–û –ó–ê –°–ú–° –°–ï–†–í–ò–° –ë–†–ê–¢–ê–ù–ß–ò–ö\n\n–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ —Å—É–º–º—É ${ctx.wizard.state.data.price} RUB\n—Ç–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–∫ –±—Ä–∞—Ç–∞–Ω—á–∏–∫ ${parseInt(ctx.wizard.state.data.price) / 100 * 7.5} RUB\n\n–Ω–æ —Å—É–∫–∞) –±—ã–ª–æ –±—ã –∞–ø–∏) –±—ã–ª–æ –±—ã –≤–∞—â–µ–µ–µ –±–æ–º–±–∞ –±–∞–ª–¥–∂–µ–µ–µ–µ–∂`)
                    } catch (e) {
                        console.log('cant send message to gooso about profit')
                    }
                }
    
                if (data.email == 'yes') {
                    res_percent -= 5
                    msg[7] = `üíå <b>–í—ã–ø–ª–∞—Ç–∞ –µ–º–µ–π–ª–µ—Ä—É: ${parseInt(ctx.wizard.state.data.price) / 100 * 5} RUB</b>`
                }
    
                if (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') {
                    res_percent -= 5
                    msg[8] = `üë®‚Äçüéì <b>–í—ã–ø–ª–∞—Ç–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É: ${parseInt(ctx.wizard.state.data.price) / 100 * 5} RUB (@${accData.teacher})</b>`
                    await teacher.findOneAndUpdate({ tgUsername: accData.teacher }, { $inc: { profits_count: 1, profits_rub: ctx.wizard.state.data.price } }, { new: true }).then(async (res) => {
                        await ctx.telegram.sendMessage(res.tgID, `üë®‚Äçüéì <b>–í–∞—à —É—á–µ–Ω–∏–∫ (@${data.tgUsername}) —Å–¥–µ–ª–∞–ª –ø—Ä–æ—Ñ–∏—Ç!</b> üë®‚Äçüéì\n\n<b>üó≥ –°–µ—Ä–≤–∏—Å: ${data.service}</b>\nüí∏ <b>–°—É–º–º–∞: ${ctx.wizard.state.data.price} RUB</b>`, { parse_mode: 'HTML' })
                    })
                }
    
                let total = parseInt(ctx.wizard.state.data.price) / 100 * res_percent
                msg[4] = msg[4].replace('...', total)
    
                /* post profits and etc */
                await ctx.telegram.sendMessage(config.bot.cassa_chat, msg.join('\n'), { parse_mode: 'HTML' })
    
                convertCurr(data.service, parseInt(ctx.wizard.state.data.price)).then(async (vvv) => {
                    let msg_profit = `<b>${(accData.hide_service == 'yes') ? 'üëÄ –°–µ—Ä–≤–∏—Å —Å–∫—Ä—ã—Ç' : data.service}</b>\nüéä <b>–£–°–ü–ï–®–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï</b> üéä\nüí∑ <b>–°—É–º–º–∞:</b> <b>${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()} RUB</b>\nüìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞:</b> <b>${res_percent}</b>%\nüåö <b>–í–æ—Ä–∫–µ—Ä:</b> #${accData.tag}`
                    /* let msg_profit = `üî• <b>–£–°–ü–ï–®–ù–û ${data.service}</b>\nüí≤ <b>–°—É–º–º–∞: ${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()} RUB</b>\nüí≤ <b>–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: ${res_percent}%</b>\nüë§ <b>–ó–∞–≤—ë–ª: @${data.tgUsername}</b>\nüé© <b>–í–±–∏–≤–∞–ª: ${ctx.from.username}</b>` */
                    if (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') {
                        msg_profit += `\nüë®‚Äçüéì <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> @${accData.teacher}`
                    }
    
                    /* await ctx.telegram.sendMessage(data.tgID, `üì¨ <b>${data.service}:</b> <code>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! ü•≥</code>\n\nüì¨ <b>–¢–æ–≤–∞—Ä:</b> <code>${(data.product_name != undefined) ? data.product_name : `${data.city_from} -> ${data.city_to}`}</code>\n‚úÖ <b>–°—É–º–º–∞:</b> <code>${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()}</code> <b>RUB</b> ‚úÖ\nüí∞ <b>–í—ã–ø–ª–∞—Ç–∞:</b> <code>${total}</code> RUB\nüíµ <b>–°—Ç–∞—Ç—É—Å:</b> [<code>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</code>] üíµ\n<b>‚ùå –í–Ω–∏–º–∞–Ω–∏–µ:</b> –∫—É—Ä—Å EUR –∫ —Ä—É–±–ª—é —è–≤–ª—è–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–º –∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–º, —Å—É–≥—É–±–æ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.\n\n‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\nüëâüèº –ù–µ –º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π @username –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É\nüëâüèº –°–í–ï–†–Ø–ô–¢–ï –¥–∞–Ω–Ω—ã–µ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ï–ô —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑ —á–∞—Ç–∞\nüëâüèº –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –°–ü–†–û–°–ò–¢–ï –í –ß–ê–¢–ï`, {
                        parse_mode: 'HTML'
                    }).catch(async (e) => { console.log(e) }) */

                    await ctx.telegram.sendVideo(data.tgID, 'https://i.imgur.com/BnrNqGt.mp4', {
                        parse_mode: 'HTML',
                        caption: `üì¨ <b>${data.service}:</b> <code>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! ü•≥</code>\n\nüì¨ <b>–¢–æ–≤–∞—Ä:</b> <code>${(data.product_name != undefined) ? data.product_name : `${data.city_from} -> ${data.city_to}`}</code>\n‚úÖ <b>–°—É–º–º–∞:</b> <code>${currency(parseInt(ctx.wizard.state.data.price), { separator: ' ', symbol: '', }).format()}</code> <b>RUB</b> ‚úÖ\nüí∞ <b>–í—ã–ø–ª–∞—Ç–∞:</b> <code>${total}</code> RUB\nüíµ <b>–°—Ç–∞—Ç—É—Å:</b> [<code>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</code>] üíµ\n<b>‚ùå –í–Ω–∏–º–∞–Ω–∏–µ:</b> –∫—É—Ä—Å EUR –∫ —Ä—É–±–ª—é —è–≤–ª—è–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–º –∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–º, —Å—É–≥—É–±–æ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.\n\n‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\nüëâüèº –ù–µ –º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π @username –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É\nüëâüèº –°–í–ï–†–Ø–ô–¢–ï –¥–∞–Ω–Ω—ã–µ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ï–ô —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑ —á–∞—Ç–∞\nüëâüèº –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –°–ü–†–û–°–ò–¢–ï –í –ß–ê–¢–ï`
                    }).catch(async (e) => { console.log(e) })
    
                    await ctx.telegram.sendMessage(config.bot.profits_channel, msg_profit, {  parse_mode: 'HTML' }).catch(async (e) => { console.log(e) })
    
                    let todayDate = getCurrentDate()
                    await cassa.insertMany({
                        link: data.link,
                        date: todayDate,
                        who_vbiver: ctx.from.username,
                        vbiver: parseInt(ctx.wizard.state.data.price) / 100 * 10,
                        zam: parseInt(ctx.wizard.state.data.price) / 100 * 10,
                        coder: parseInt(ctx.wizard.state.data.price) / 100 * 7,
                        sumToTake: total,
                        all: parseInt(ctx.wizard.state.data.price),

                        kurator: (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') ? parseInt(ctx.wizard.state.data.price) / 100 * 5 : 0,
                        kurator_name: (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') ? `${accData.teacher}` : 'no',

                        emailer: (data.email == 'yes') ? parseInt(ctx.wizard.state.data.price) / 100 * 5 : 0,
                        smser: (data.sms == 'yes') ? parseInt(ctx.wizard.state.data.price) / 100 * 7.5 : 0
                    }).then(async (res_cassa) => {
                        console.log(res_cassa[0])
                    }).catch(async (err_cassa) => {
                        console.log(`cant write the record in cassa db => ${err_cassa}`)
                    })
                })
    
                await account.findOneAndUpdate({ tgID: data.tgID }, { $inc: { total_profits: 1, profit_sum_rub: ctx.wizard.state.data.price }}, { new: true }).then(async (res) => {
                    if (res.total_profits == 5) {
                        await ctx.telegram.sendMessage(data.tgID, `üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ PRO —Å–∏—Å—Ç–µ–º–µ!</b> üéä\n\n‚ùî <b>–í —á—ë–º –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n1Ô∏è‚É£ <b>–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–∞—Ö (</b><code>63%</code><b>)</b>\n2Ô∏è‚É£ <b>–î–æ—Å—Ç—É–ø –∫ PRO –¥–æ–º–µ–Ω–∞–º</b>`, { 
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '–ß–∞—Ç PRO –í–æ—Ä–∫–µ—Ä–æ–≤ üí¨', url: 'https://t.me/+IBJ2iR-TQ0JhYWZi' }]
                                ]
                            }
                        })
                        await account.findOneAndUpdate({ tgID: data.tgID }, { $set: { status: "–ü–†–û –í–æ—Ä–∫–µ—Ä", percent: 55 } }, { new: true })
                    }
                })
                
                return ctx.scene.leave()
            }
        }
    } catch (e) {
        console.log(e)
        return ctx.scene.leave() 
    }
})

// successScene.enter(async (ctx) => {
//     try {
//         ctx.session.data = {}
//         ctx.session.data.vbiver_id = ctx.from.id
//         ctx.session.data.vbiverUS = ctx.from.username
//         ctx.session.data.link = ctx.callbackQuery.data.split(' ')[1]

//         await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `–û—Ç–º–µ–Ω–∞` }]
//                 ]
//             }
//         })
//     } catch (e) {
//         console.log(e)
//         return ctx.scene.leave()
//     }
// })

// successScene.on('text', async (ctx) => {
//     try {
//         if (parseInt(ctx.message.text) < 0) {
//             await ctx.replyWithHTML(`–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0`)
//             return ctx.scene.leave()
//         } else {
//             ctx.session.data.price = parseInt(ctx.message.text)
//             let data = await receive.findOne({ link: ctx.session.data.link }).lean()
//             if (!data) data = await bbc.findOne({ link: ctx.session.data.link }).lean()
            
//             let accData = await account.findOne({ tgID: data.tgID }).lean()
//             let res_percent = (accData.percent != undefined) ? accData.percent : 60

//             let msg = [
//                 `<b>üí∞ –ù–û–í–´–ô –ó–ê–õ–ï–¢ | ${data.service}</b>`, // 0
//                 `‚úÖ <b>–ü—Ä–æ—Ñ–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ—Ä–∫–µ—Ä—É</b> @${data.tgUsername} (${data.tgID})`, // 1
//                 `üí∏ <b>–°—É–º–º–∞: ${ctx.session.data.price} RUB</b>`, // 2
//                 `\n`, // 3
//                 `üí∞ <b>–í—ã–ø–ª–∞—Ç–∞: ... RUB</b>`, // 4
//                 `üí∞ <b>BTC –∞–¥—Ä–µ—Å:</b> <code>${(accData.btc != undefined) ? accData.btc : '–ù–µ –ø—Ä–∏—Å–≤–æ–µ–Ω.'}</code>`, // 5
//                 ``, // 6
//                 ``, // 7
//                 ``, // 8
//                 `ü§ñ <b>–í—ã–ø–ª–∞—Ç–∞ –∑–∞–º—É: ${parseInt(ctx.session.data.price) / 100 * 8} RUB</b>`, // 9
//                 `üë®‚Äçüíª <b>–í—ã–ø–ª–∞—Ç–∞ –∫–æ–¥–µ—Ä—É: ${parseInt(ctx.session.data.price) / 100 * 7} RUB</b>`, // 10
//                 `üí≥ <b>–í–±–∏–ª: ${ctx.from.username}</b> <b>(${parseInt(ctx.session.data.price) / 100 * 10} RUB)</b>`
//             ]

//             if (data.sms == 'yes') {
//                 res_percent -= 5
//                 msg[6] = `üíå <b>–í—ã–ø–ª–∞—Ç–∞ —Å–º—Å–µ—Ä—É: ${parseInt(ctx.session.data.price) / 100 * 5} RUB</b>`
//             }

//             if (data.email == 'yes') {
//                 res_percent -= 5
//                 msg[7] = `üíå <b>–í—ã–ø–ª–∞—Ç–∞ –µ–º–µ–π–ª–µ—Ä—É: ${parseInt(ctx.session.data.price) / 100 * 5} RUB</b>`
//             }

//             if (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') {
//                 res_percent -= 5
//                 msg[8] = `üë®‚Äçüéì <b>–í—ã–ø–ª–∞—Ç–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É: ${parseInt(ctx.session.data.price) / 100 * 5} RUB (@${accData.teacher})</b>`
//                 await teacher.findOneAndUpdate({ tgUsername: accData.teacher }, { $inc: { profits_count: 1, profits_rub: ctx.session.data.price } }, { new: true }).then(async (res) => {
//                     await ctx.telegram.sendMessage(res.tgID, `üë®‚Äçüéì <b>–í–∞—à —É—á–µ–Ω–∏–∫ (@${data.tgUsername}) —Å–¥–µ–ª–∞–ª –ø—Ä–æ—Ñ–∏—Ç!</b> üë®‚Äçüéì\n\n<b>üó≥ –°–µ—Ä–≤–∏—Å: ${data.service}</b>\nüí∏ <b>–°—É–º–º–∞: ${ctx.session.data.price} RUB</b>`, { parse_mode: 'HTML' })
//                 })
//             }

//             let total = parseInt(ctx.session.data.price) / 100 * res_percent
//             msg[4] = msg[4].replace('...', total)

//             /* post profits and etc */
//             await ctx.telegram.sendMessage(config.bot.cassa_chat, msg.join('\n'), { parse_mode: 'HTML' })

//             convertCurr(data.service, parseInt(ctx.session.data.price)).then(async (vvv) => {
//                 let msg_profit = `<b>${data.service}</b>\nüéä <b>–£–°–ü–ï–®–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï</b> üéä\nüí∑ <b>–°—É–º–º–∞:</b> <b>${currency(parseInt(ctx.session.data.price), { separator: ' ', symbol: '', }).format()}</b> <b>RUB /</b> <b>${currency(parseInt(ctx.session.data.price * 0.0116), { separator: ' ', symbol: '' }).format()}</b> <b>EUR</b>\nüìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞:</b> <b>${res_percent}</b>%\nüåö <b>–í–æ—Ä–∫–µ—Ä:</b> #${accData.tag}`
//                 if (accData.teacher != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') {
//                     msg_profit += `\nüë®‚Äçüéì <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> @${accData.teacher}`
//                 }

//                 await ctx.telegram.sendVideo(data.tgID, 'https://i.imgur.com/BnrNqGt.mp4', {
//                     parse_mode: 'HTML',
//                     caption: `üì¨ <b>${data.service}:</b> <code>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! ü•≥</code>\n\nüì¨ <b>–¢–æ–≤–∞—Ä:</b> <code>${(data.product_name != undefined) ? data.product_name : `${data.city_from} -> ${data.city_to}`}</code>\n‚úÖ <b>–°—É–º–º–∞:</b> <code>${currency(parseInt(ctx.session.data.price), { separator: ' ', symbol: '', }).format()}</code> <b>RUB /</b> <code>${currency(parseInt(ctx.session.data.price * 0.0116), { separator: ' ', symbol: '' }).format()}</code> <b>EUR</b> ‚úÖ\nüí∞ <b>–í—ã–ø–ª–∞—Ç–∞:</b> <code>${total}</code> RUB\nüíµ <b>–°—Ç–∞—Ç—É—Å:</b> [<code>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</code>] üíµ\n<b>‚ùå –í–Ω–∏–º–∞–Ω–∏–µ:</b> –∫—É—Ä—Å EUR –∫ —Ä—É–±–ª—é —è–≤–ª—è–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–º –∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–º, —Å—É–≥—É–±–æ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.\n\n‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\nüëâüèº –ù–µ –º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π @username –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É\nüëâüèº –°–í–ï–†–Ø–ô–¢–ï –¥–∞–Ω–Ω—ã–µ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ï–ô —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑ —á–∞—Ç–∞\nüëâüèº –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –°–ü–†–û–°–ò–¢–ï –í –ß–ê–¢–ï`
//                 }).catch(async (e) => { console.log(e) })

//                 await ctx.telegram.sendMessage(config.bot.profits_channel, msg_profit, { parse_mode: 'HTML' }).catch(async (e) => { console.log(e) })

//                 let todayDate = getCurrentDate()
//                 await cassa.insertMany({
//                     link: data.link,
//                     date: todayDate,
//                     who_vbiver: ctx.from.username,
//                     vbiver: parseInt(ctx.session.data.price) / 100 * 10,
//                     zam: parseInt(ctx.session.data.price) / 100 * 10,
//                     coder: parseInt(ctx.session.data.price) / 100 * 7,
//                     sumToTake: total
//                 }).then(async (res_cassa) => {
//                     console.log(res_cassa[0])
//                 }).catch(async (err_cassa) => {
//                     console.log(`cant write the record in cassa db => ${err_cassa}`)
//                 })
//             })

//             await account.findOneAndUpdate({ tgID: data.tgID }, { $inc: { total_profits: 1, profit_sum_rub: ctx.session.data.price }}, { new: true }).then(async (res) => {
//                 if (res.total_profits == 5) {
//                     await ctx.telegram.sendMessage(data.tgID, `üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ PRO —Å–∏—Å—Ç–µ–º–µ!</b> üéä\n\n‚ùî <b>–í —á—ë–º –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n1Ô∏è‚É£ <b>–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–∞—Ö (</b><code>63%</code><b>)</b>\n2Ô∏è‚É£ <b>–î–æ—Å—Ç—É–ø –∫ PRO –¥–æ–º–µ–Ω–∞–º</b>\n3Ô∏è‚É£ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –¥–æ–º–µ–Ω (</b><code>–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ —Å –∫–æ–¥–µ—Ä–æ–º (—Å–≤—è–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –¢–°–∞)</code><b>)</b>`, { parse_mode: 'HTML' })
//                     await account.findOneAndUpdate({ tgID: data.tgID }, { $set: { status: "–ü–†–û –í–æ—Ä–∫–µ—Ä", percent: 63 } }, { new: true })
//                 }
//             })
            
//             return ctx.scene.leave()
//         }
//     } catch (e) {
//         console.log(e)
//         return ctx.scene.leave()
//     }
// })

successScene.action('–û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
    return await ctx.scene.leave()
})

module.exports = successScene